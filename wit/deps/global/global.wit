package godot:global@0.1.0;

interface globalscope {
    use godot:core/core@0.1.0.{godot-var, error-res};
    use godot:core/typeis@0.1.0.{variant-type};

    enum joy-button {
        a,
        b,
        x,
        y,
        back,
        guide,
        start,
        left-stick,
        right-stick,
        left-shoulder,
        right-shoulder,
        dpad-up,
        dpad-down,
        dpad-left,
        dpad-right,
        misc1,
        paddle1,
        paddle2,
        paddle3,
        paddle4,
        touchpad,
    }

    enum joy-axis {
        left-x,
        left-y,
        right-x,
        right-y,
        trigger-left,
        trigger-right,
    }

    enum mouse-button {
        none,
        left,
        right,
        middle,
        wheel-up,
        wheel-down,
        wheel-left,
        wheel-right,
        xbutton1,
        xbutton2,
    }

    flags mouse-button-mask {
        left,
        right,
        middle,
        mb-xbutton1,
        mb-xbutton2,
    }

    // Printing
    print: func(s: string);
    print-rich: func(s: string);
    printerr: func(s: string);
    push-error: func(s: string);
    push-warning: func(s: string);

    // var_to_* and *_to_var
    bytes-to-var: func(b: borrow<godot-var>) -> option<godot-var>;
    bytes-to-var-with-objects: func(b: borrow<godot-var>) -> option<godot-var>;
    var-to-bytes: func(v: option<borrow<godot-var>>) -> godot-var;
    var-to-bytes-with-objects: func(v: option<borrow<godot-var>>) -> godot-var;
    var-to-str: func(v: option<borrow<godot-var>>) -> godot-var;
    str-to-var: func(s: borrow<godot-var>) -> option<godot-var>;

    weakref: func(v: borrow<godot-var>) -> option<godot-var>;

    is-instance-valid: func(v: borrow<godot-var>) -> bool;
    is-instance-id-valid: func(id: u64) -> bool;

    is-same: func(a: borrow<godot-var>, b: borrow<godot-var>) -> bool;

    type-convert: func(v: borrow<godot-var>, t: variant-type) -> godot-var;

    // RNG
    rand-from-seed: func(seed: u64) -> godot-var;
    randf: func() -> f64;
    randf-range: func(%from: f64, to: f64) -> f64;
    randfn: func(mean: f64, deviation: f64) -> f64;
    randi: func() -> s64;
    randi-range: func(%from: s64, to: s64) -> s64;
    randomize: func();
    seed: func(seed: u64);

    // Load/save
    load: func(path: string) -> godot-var;
    save: func(res: borrow<godot-var>, path: string) -> error-res;
}

world imports {
    import globalscope;
    import classdb;
    import engine;
    import input;
    import input-map;
    import ip;
    import marshalls;
    import project-settings;
    import time;
}
